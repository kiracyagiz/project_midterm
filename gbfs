from pacman_module.game import Agent, Directions
from pacman_module.util import PriorityQueue

def key(state):
    """Returns a key that uniquely identifies a Pacman game state.

    Arguments:
        state: a game state. See API or class pacman.GameState.

    Returns:
        A hashable key tuple.
    """
    return (
        state.getPacmanPosition(),
        state.getFood(),
        state.getNumFood()
    )

def nullHeuristic(state, problem=None):
    """A heuristic function estimates the cost from the current state to the
    nearest goal in the provided SearchProblem."""
    return 0

class PacmanAgent(Agent):
    """Pacman agent based on Greedy Best-First Search (GBFS)."""

    def __init__(self):
        super().__init__()
        self.moves = None

    def get_action(self, state):
        """Given a Pacman game state, returns a legal move.

        Arguments:
            state: a game state. See API or class pacman.GameState.

        Returns:
            A legal move as defined in game.Directions.
        """

        if self.moves is None:
            self.moves = self.gbfs(state)

        if self.moves:
            return self.moves.pop(0)
        else:
            return Directions.STOP

    def gbfs(self, state):
        """Greedy Best-First Search algorithm to find the optimal path.

        Arguments:
            state: a game state. See API or class pacman.GameState.

        Returns:
            A list of legal moves.
        """

        fringe = PriorityQueue()
        fringe.push((state, []), 0)
        closed = set()

        while not fringe.isEmpty():
            current, path = fringe.pop()

            if current.isWin():
                return path

            state_key = key(current)

            if state_key not in closed:
                closed.add(state_key)

                for successor, action, _ in current.generatePacmanSuccessors():
                    new_path = path + [action]
                    priority = nullHeuristic(successor)
                    fringe.push((successor, new_path), priority)

        return []
